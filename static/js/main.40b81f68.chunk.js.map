{"version":3,"sources":["components/Toolbar.js","App.js","reportWebVitals.js","index.js"],"names":["Toolbar","props","state","class","className","this","type","name","onClick","status","React","Component","marked","require","App","markdown","editorMaximize","previewerMaximize","handleChange","bind","handleEditorMaximize","handlePreviewMaximize","setState","e","target","value","classes","id","style","textAlign","onChange","dangerouslySetInnerHTML","__html","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAiBeA,E,kDAdX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,0CAInB,WACI,OACI,sBAAKC,MAAM,UAAX,UACI,mBAAGA,MAAM,OAAOC,UAAaC,KAAKJ,MAAMK,KAAxC,SAA+CD,KAAKJ,MAAMM,OAC1D,mBAAGJ,MAAM,SAASK,QAASH,KAAKJ,MAAMO,QAASJ,UAAaC,KAAKJ,MAAMQ,OAAO,gB,GATxEC,IAAMC,WCCxBC,G,MAASC,EAAQ,KA2HNC,E,kDA1Eb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXa,SAnDW,qmCAoDXC,gBAAgB,EAChBC,mBAAmB,GAErB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBATZ,E,wDAYnB,WACEd,KAAKiB,SAAS,CACZN,gBAAiBX,KAAKH,MAAMc,mB,mCAIhC,WACEX,KAAKiB,SAAS,CACZL,mBAAoBZ,KAAKH,MAAMe,sB,0BAInC,SAAaM,GACXlB,KAAKiB,SAAS,CAACP,SAAUQ,EAAEC,OAAOC,U,oBAGpC,WAOE,IAAMC,EAAUrB,KAAKH,MAAMc,eACvB,CAAC,uBAAwB,mBAAoB,kBAC7CX,KAAKH,MAAMe,kBACT,CAAC,kBAAmB,wBAAyB,kBAC7C,CAAC,aAAc,cAAe,oBAEpC,OACE,sBAAKU,GAAG,MAAR,UACE,oBAAIC,MAAO,CAACC,UAAW,UAAvB,gCAGA,sBAAKzB,UAAWsB,EAAQ,GAAIC,GAAG,mBAA/B,UACE,cAAC,EAAD,CACApB,KAAO,SACPD,KAAO,cACPG,OAAUiB,EAAQ,GAClBlB,QAAWH,KAAKe,uBAEhB,0BAAUK,MAAOpB,KAAKH,MAAMa,SAAUe,SAAUzB,KAAKa,aAAcS,GAAG,cAGxE,sBAAKvB,UAAWsB,EAAQ,GAAIC,GAAG,sBAA/B,UACE,cAAC,EAAD,CACApB,KAAO,YACPD,KAAO,aACPG,OAAUiB,EAAQ,GAClBlB,QAAWH,KAAKgB,wBAEhB,qBAAKM,GAAG,YACRI,wBAAyB,CACvBC,OAAQpB,EAAOP,KAAKH,MAAMa,uB,GAlEpBL,IAAMC,WCvCTsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.40b81f68.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Toolbar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return (\r\n            <div class=\"toolbar\">\r\n                <i class=\"name\" className = {this.props.type}>{this.props.name}</i>\r\n                <i class=\"status\" onClick={this.props.onClick} className = {this.props.status+' btn'}></i>\r\n            </div>\r\n          );\r\n    }\r\n}\r\n \r\nexport default Toolbar;","import React from 'react';\nimport Toolbar from './components/Toolbar'\nimport './App.css';\nlet marked = require(\"marked\");\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: placeholder,\n      editorMaximize: false,\n      previewerMaximize: false\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleEditorMaximize = this.handleEditorMaximize.bind(this);\n    this.handlePreviewMaximize = this.handlePreviewMaximize.bind(this);\n  }\n\n  handleEditorMaximize(){\n    this.setState({\n      editorMaximize: !this.state.editorMaximize\n    });\n  }\n\n  handlePreviewMaximize(){\n    this.setState({\n      previewerMaximize: !this.state.previewerMaximize\n    })\n  }\n\n  handleChange(e){\n    this.setState({markdown: e.target.value})\n  }\n\n  render() { \n\n    \n    \n\n\n\n    const classes = this.state.editorMaximize\n      ? ['editorWrap maximized', 'previewWrap hide', 'fa fa-compress']\n      : this.state.previewerMaximize\n        ? ['editorWrap hide', 'previewWrap maximized', 'fa fa-compress']\n        : ['editorWrap', 'previewWrap', 'fa fa-arrows-alt'];\n\n    return ( \n      <div id=\"App\">\n        <h1 style={{textAlign: 'center'}}>\n          Markdown Previewer\n        </h1>\n        <div className={classes[0]} id=\"editor-container\">\n          <Toolbar\n          name = 'Editor' \n          type = 'far fa-edit'\n          status = {classes[2]}\n          onClick = {this.handleEditorMaximize}\n          />\n          <textarea value={this.state.markdown} onChange={this.handleChange} id=\"editor\"/>\n        </div>\n\n        <div className={classes[1]} id=\"previewer-container\">\n          <Toolbar\n          name = 'Previewer' \n          type = 'far fa-eye'\n          status = {classes[2]}\n          onClick = {this.handlePreviewMaximize}\n          />\n          <div id=\"previewer\"\n          dangerouslySetInnerHTML={{\n            __html: marked(this.state.markdown)\n            }}>\n        </div>\n        </div>\n      </div>\n     );\n  }\n}\n \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}